<?php

/**
 * Module file for the gis_ol bundle.
 */

/**
 * Function to find specific field and return the value.
 *
 * @param \Drupal\Core\Entity $entity 
 *   The entity to get the value from
 *
 * @param string $field
 *    The field name
 *
 * @return: Value found, or default value
 */
function gis_ol__get_value(&$entity,$field,$default_value='') {
	try {
		$f=$entity->get($field);
		if ($f) {
			$v=$f->getValue();
			if (isset($v[0]['value'])) {return $v[0]['value'];}
		}
	} catch(Exception $e) {
	}
    return $default_value;
}

/**
 * Implements hook_node_view() for gis_ol_node_view()
 *
 * Sets the right libraries and pass data to twig-file.
 */
function gis_ol_node_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
    if ($entity->bundle()=='gis_ol') {
        
        $gis_ol_node_id=$entity->id();
		$uiterlijk='groen';

        $parms='';
		// gewone parameters klaar zetten
        $body=gis_ol__get_value($entity,'gis_ol_body');
		$body=preg_replace("/\r\n/","\r",$body);
		$body=preg_replace("/\n/","\r",$body);
		$body=explode("\r",$body);
		foreach ($body as $b) {
			if (substr($b,0,2)=='m=') {$b='m='.base64_encode(htmlspecialchars(trim(substr($b,2))));}
			$parms.=($parms==''?'':',').$b;
			if (substr($b,0,2)=='u=') {$uiterlijk=substr($b,2);}
		}
        // layer_definities er achter plakken
        $ldefs=str_replace("\r\n","\r",gis_ol__get_value($entity,'gis_ol_layer_definities'));
        $ldefs=str_replace("\n","\r",$ldefs);
        $ldefs=explode("\r",$ldefs);
        $parms.=',ld=';
        foreach ($ldefs as $ldef) {
            if ($ldef!='') {$parms.=base64_encode($ldef).'|';}
        }
        
		/*	Alternatief:
		$kaart='<div class="map-holder gis_ol">';
        $kaart.='<div id="gis_ol_map_'.$gis_ol_node_id.'" class="map" parms="'.$parms.'" dwnld="'.__DIR__.'"></div>';
        $kaart.='<div id="popup'.$gis_ol_node_id.'" class="ol-popup"><a href="#" id="popup-closer'.$gis_ol_node_id.'" class="ol-popup-closer"></a><div id="popup-content'.$gis_ol_node_id.'"></div></div>';
        $kaart.='</div>';
        $build['_map']=[
            '#markup' => $kaart,
        ];*/
		$dwnld=__DIR__;
		$loader = new Twig_Loader_Array(array('gis_ol.html.twig' => file_get_contents($dwnld.'/templates/gis-ol.html.twig')));
		$twig = new Twig_Environment($loader);
        $build['_map']=[
            '#markup' => $twig->render('gis_ol.html.twig', array('node_id'=>$gis_ol_node_id,'parms'=>$parms,'dwnld'=>$dwnld)),
        ];
        
		// basis library
        $build['#attached']['library'][] = 'gis_ol/gis_ol';
		
		// aanvullen met specifieke library
		$build['#attached']['library'][] = 'gis_ol/gis_ol_'.$uiterlijk;
    }
}

/**
 * Implements hook_form_alter() for gis_ol_form_alter()
 *
 * Sets the right libraries and pass data to javascript functions about several sources of layers.
 *
 * The layers for each layer-type are read from different sources:
 *     - WMS:		  The layers are read from the server via a GetCapabilities request
 *	   - WMSinput:	  Uses the layers from WMS
 *	   - datarivmnl:  Reads layers from cached-file or via a GetRecords request (followed by an GetRecordsById request per layer)
 *	   - Vectortile:  The layers are read from the server via a bare tms request
 *
 */
function gis_ol_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    if ($form_id == 'node_gis_ol_form' || $form_id == 'node_gis_ol_edit_form') {
		
        $form['#attached']['library'][] = 'gis_ol/gis_ol_edit';
		
		// read WMS (and WMSinput) layers
        $xml=simplexml_load_file('https://geodata.rivm.nl/geoserver/wms?VERSION=1.1.1&REQUEST=GetCapabilities');
        $wms='';
        if ($xml->Capability->Layer) foreach ($xml->Capability->Layer->children() as $layer) {
            $name=$layer->Name;
            $title=$layer->Title;
            if ($name!='') {
                $wms.=($wms==''?'':'|').$name.'='.$title;
            }
        }
        $form['#attached']['drupalSettings']['gis_ol']['wms'] = $wms;

		// read datarivmnl layers
		$readFromServer=true; $fname=__DIR__.'datarivmnl.def';
		if (file_exists($fname)) {$readFromServer=false;}
		if ($readFromServer) {
			$xml=file_get_contents('https://data.rivm.nl/geonetwork/srv/dut/csw-ngr?service=CSW&resultType=results&version=2.0.2&request=GetRecords&MaxRecords=1000');
			$xml=preg_replace("/(<\/?)(\w+):([^>]*>)/", "$1$2$3", $xml);
			$xml=new SimpleXMLElement($xml);
			$wms='';
			foreach ($xml->cswSearchResults->children() as $layer) {
				$layerXML=file_get_contents('https://data.rivm.nl/geonetwork/srv/dut/csw-ngr?request=GetRecordById&service=CSW&version=2.0.2&elementSetName=full&id='.$layer->dcidentifier);
				$layerXML=preg_replace("/(<\/?)(\w+):([^>]*>)/", "$1$2$3", $layerXML);
				$layerXML=new SimpleXMLElement($layerXML);
				if ($layer->dctitle!='') {
					foreach ($layerXML->cswRecord->children() as $key=>$value) if ($key=='dcURI' && $value['protocol']=='OGC:WMS') {
						$server=$value[0];
						if (substr($server,-1,1)=='?') {$server=substr($server,0,strlen($server)-1);}
						if (substr($server,-1,1)=='/') {$server=substr($server,0,strlen($server)-1);}
						if ($server!='' && $value['name']!='') {
							$wms.=($wms==''?'':'|');
							$wms.=$server.'='.$layer->dctitle.'='.$value['name'];
						}
					}
				}
			}
			file_put_contents($fname,$wms);
		} else {
			$wms=file_get_contents($fname);
		}
        $form['#attached']['drupalSettings']['gis_ol']['datarivmnl'] = $wms;
		
		// read Vectortile layers
        $xml=simplexml_load_file('http://rivm-gistc-l01a.rivm.ssc-campus.nl:8080/geoserver/gwc/service/tms/1.0.0');
        $wms='';
        if ($xml->Tilemaps) foreach ($xml->Tilemaps->children() as $layer) {
            $title=$layer->title;
            if ($title!='' && $layer->srs=='EPSG:28992' && stripos($layer->href,'@pbf')!==false) {
                $wms.=($wms==''?'':'|').$title.'='.$title;
            }
        }
        $form['#attached']['drupalSettings']['gis_ol']['vectortile'] = $wms;
		
		
    }
}

/**
 * Implements hook_entity_presave() for gis_ol_entity_presave()
 *
 * Called before saving a Map, to check if the file datarivmnl.def should be removed.
 * This file contains all available layers from data.rivm.nl.
 * It will be regenerated upon the first edit of a Map.
 *
 */
function gis_ol_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
	if ($entity->bundle()=='gis_ol') {
		$body=gis_ol__get_value($entity,'gis_ol_body');
		$body=preg_replace("/\r\n/","\r",$body);
		$body=preg_replace("/\n/","\r",$body);
		$body=explode("\r",$body);
		foreach ($body as $b) {
			if (substr($b,0,4)=='tmp=') {
				if (substr($b,4,1)=='1') {
					$fname='datarivmnl.def';
					if (file_exists($fname)) {unlink($fname);}
				}
			}
		}
  }
}

/**
 */
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\field\Entity\FieldConfig;
function gis_ol_uninstall() {
	FieldStorageConfig::loadByName('node', 'gis_ol_body')->delete();
	FieldStorageConfig::loadByName('node', 'gis_ol_layer_definities')->delete();
}