(function (root, factory) { if(typeof define === "function" && define.amd) { define(["openlayers"], factory); } else if(typeof module === "object" && module.exports) { module.exports = factory(require("openlayers")); } else { root.LayerSwitcher = factory(root.ol); } }(this, function(ol) { ol.control.LayerSwitcher = function(opt_options) { var options = opt_options || {}; this.map_id = options.map_id ? options.map_id : -1; var tipLabel = options.tipLabel ? options.tipLabel : 'Legend'; this.baseURL=jQuery('#gis_ol_map_'+this.map_id).attr('dwnld'); this.baseURL=this.baseURL.substr(this.baseURL.lastIndexOf('htdocs')+7).replace(/\\/g,'/'); if (window.location.hostname=='127.0.0.1') {this.baseURL='/drupal/'+this.baseURL;} else {this.baseURL='/'+this.baseURL;} this.mapListeners = []; this.hiddenClassName = 'ol-unselectable ol-control '+(typeof(options['className'])=='undefined'?'':' '+options['className']); if (ol.control.LayerSwitcher.isTouchDevice_()) { this.hiddenClassName += ' touch'; } this.shownClassName = 'shown'; var element = document.createElement('div'); element.className = this.hiddenClassName; var button = document.createElement('button'); button.setAttribute('title', tipLabel); element.appendChild(button); this.panel = document.createElement('div'); this.panel.className = 'panel'; element.appendChild(this.panel); ol.control.LayerSwitcher.enableTouchScroll_(this.panel); var this_ = this; button.onclick = function(e) { e = e || window.event; if (jQuery('.panel').css('display')=='none') {this_.showPanel();} else {this_.hidePanel();} e.preventDefault(); }; this_.panel.onmouseout = function(e) { e = e || window.event; if (!this_.panel.contains(e.toElement || e.relatedTarget)) { this_.hidePanel(); } }; ol.control.Control.call(this, { element: element, target: options.target }); }; ol.inherits(ol.control.LayerSwitcher, ol.control.Control); ol.control.LayerSwitcher.prototype.showPanel = function() { if (!this.element.classList.contains(this.shownClassName)) { jQuery(this.panel).css('max-height',(jQuery('#gis_ol_map_'+this.map_id).height()-80)+'px'); this.element.classList.add(this.shownClassName); this.renderPanel(); } }; ol.control.LayerSwitcher.prototype.hidePanel = function() { if (this.element.classList.contains(this.shownClassName)) { this.element.classList.remove(this.shownClassName); } }; ol.control.LayerSwitcher.prototype.renderPanel = function() { this.ensureTopVisibleBaseLayerShown_(); while(this.panel.firstChild) { this.panel.removeChild(this.panel.firstChild); } var ul = document.createElement('ul'); this.panel.appendChild(ul); this.renderLayers_(this.getMap(), ul); }; ol.control.LayerSwitcher.prototype.setMap = function(map) { for (var i = 0, key; i < this.mapListeners.length; i++) { ol.Observable.unByKey(this.mapListeners[i]); } this.mapListeners.length = 0; ol.control.Control.prototype.setMap.call(this, map); if (map) { var this_ = this; this.mapListeners.push(map.on('pointerdown', function() { this_.hidePanel(); })); this.renderPanel(); } }; ol.control.LayerSwitcher.prototype.ensureTopVisibleBaseLayerShown_ = function() { var lastVisibleBaseLyr; ol.control.LayerSwitcher.forEachRecursive(this.getMap(), function(l, idx, a) { if (l.get('type') === 'base' && l.getVisible()) { lastVisibleBaseLyr = l; } }); if (lastVisibleBaseLyr) this.setVisible_(lastVisibleBaseLyr, true); }; ol.control.LayerSwitcher.prototype.setVisible_ = function(lyr, visible) { var map = this.getMap(); lyr.setVisible(visible); var el=document.getElementById('timeSliderLayer'+this.map_id); if (el) {jQuery(el).hide();} if (visible && (lyr.get('type') === 'base' || GIS_ol_maps[this.map_id].l.substr(1,1)=='0')) { ol.control.LayerSwitcher.forEachRecursive(map, function(l, idx, a) { if (l != lyr && l.get('type') === lyr.get('type')) { l.setVisible(false); } }); } }; ol.control.LayerSwitcher.prototype.renderLayer_ = function(lyr, idx) { var this_ = this, opa, v; var li = document.createElement('li'); var lyrTitle = lyr.get('title'); var lyrId = ol.control.LayerSwitcher.uuid(); var label = document.createElement('label'); var div=document.createElement('div'), hasDiv=false;; div.className='layer-switcher-layer'; div.id='gis_ol_l_'+this_.map_id+'_lno_'+idx; if (lyr.getLayers && !lyr.get('combine')) { li.className = 'group'; label.innerHTML = lyrTitle; li.appendChild(label); var ul = document.createElement('ul'); li.appendChild(ul); this.renderLayers_(lyr, ul); } else { li.className = 'layer'; var input = document.createElement('input'),is_base=false; if (lyr.get('type') === 'base' || GIS_ol_maps[this_.map_id].l.substr(1,1)=='0') { input.type = 'radio'; input.name = lyr.get('type'); if (lyr.get('type') === 'base') {is_base=true;} } else { input.type = 'checkbox'; } input.id = lyrId; input.checked = lyr.get('visible'); input.onchange = function(e) {this_.setVisible_(lyr, e.target.checked);}; input.className='layer-select'; li.appendChild(input); label.htmlFor = lyrId; label.innerHTML = lyrTitle; var rsl = this.getMap().getView().getResolution(); if (rsl > lyr.getMaxResolution() || rsl < lyr.getMinResolution()){label.className += ' disabled';} li.appendChild(label); if (GIS_ol_maps[this_.map_id].l.substr(2,1)=='1') { if (!is_base) { v=lyr.getOpacity(); if (typeof(v)=='undefined') { v=GIS_ol_maps[this_.map_id].layers_def[GIS_ol_maps[this_.map_id].layers_def.length-idx-1].opacity; } opa=document.createElement('input'); opa.title='Selecteer doorschijnbaarheid'; opa.type='range'; opa.min=0; opa.max=1; opa.step=0.1; opa.value=v; opa.className='layer-opacity'; opa.onchange=function(e) {lyr.setOpacity(parseFloat(jQuery(this).val()));}; opa.oninput=function(e) {lyr.setOpacity(parseFloat(jQuery(this).val()));}; div.appendChild(opa); hasDiv=true; } } if (GIS_ol_maps[this_.map_id].l.substr(3,1)!='0') { if (!is_base) { opa=document.createElement('img'); opa.title='Download kaartlaag data'; opa.src=this_.baseURL+'/css/gis-ol-download.png'; opa.setAttribute('map_id',this_.map_id); opa.setAttribute('layer',idx); if (GIS_ol_maps[this_.map_id].l.substr(3,1)=='1') { opa.onclick=function(e) {startDownload(this,this_.map_id,idx,false);}; } else { opa.onclick=function(e) {startDownload(this,this_.map_id,idx,true);}; } if (hasDiv) {opa.style='margin-left: 20px;';} div.appendChild(opa); hasDiv=true; } } if (GIS_ol_maps[this_.map_id].l.substr(4,1)=='1') { if (!is_base) { opa=document.createElement('img'); opa.title='Zoek metadata op data.rivm.nl'; opa.src=this_.baseURL+'/css/gis-ol-datarivmnl.png'; opa.onclick=function(e) {gotoDataRIVMNl(this_.map_id,idx);}; if (hasDiv) {opa.style='margin-left: 20px;';} div.appendChild(opa); hasDiv=true; } } if (GIS_ol_maps[this_.map_id].l.substr(5,1)=='1') { if (!is_base) { opa=document.createElement('img'); opa.title='Toon legenda'; opa.src=this_.baseURL+'/css/gis-ol-legend.png'; opa.onclick=function(e) {showLegend(this_.map_id,idx);}; if (hasDiv) {opa.style='margin-left: 20px;';} div.appendChild(opa); hasDiv=true; } } if (hasDiv) { li.appendChild(div); } } return li; }; ol.control.LayerSwitcher.prototype.renderLayers_ = function(lyr, elm) { var lyrs = lyr.getLayers().getArray().slice(); for (var i = 0, l; i < lyrs.length; i++) { l = lyrs[i]; if (l.get('title')) { elm.appendChild(this.renderLayer_(l, i)); } } }; ol.control.LayerSwitcher.forEachRecursive = function(lyr, fn) { lyr.getLayers().forEach(function(lyr, idx, a) { fn(lyr, idx, a); if (lyr.getLayers) { ol.control.LayerSwitcher.forEachRecursive(lyr, fn); } }); }; ol.control.LayerSwitcher.uuid = function() { return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8); return v.toString(16); }); }; ol.control.LayerSwitcher.enableTouchScroll_ = function(elm) { if(ol.control.LayerSwitcher.isTouchDevice_()){ var scrollStartPos = 0; elm.addEventListener("touchstart", function(event) { scrollStartPos = this.scrollTop + event.touches[0].pageY; }, false); elm.addEventListener("touchmove", function(event) { this.scrollTop = scrollStartPos - event.touches[0].pageY; }, false); } }; ol.control.LayerSwitcher.isTouchDevice_ = function() { try { document.createEvent("TouchEvent"); return true; } catch(e) { return false; } }; var LayerSwitcher = ol.control.LayerSwitcher; return LayerSwitcher; }));