var position2_url_suggest='https://geodata.nationaalgeoregister.nl/locatieserver/v3/suggest?&rows=5&fq=*:*'; var position2_url_lookup='https://geodata.nationaalgeoregister.nl/locatieserver/v3/lookup?id='; function gotoDataRIVMNl(map_id,lno) { var l=GIS_ol_maps[map_id].layers_def[lno]; window.open('https://data.rivm.nl/geonetwork/srv/dut/catalog.search#/search?resultType=details&fast=index&_content_type=json&from=1&to=4&sortBy=relevance&any_OR__title='+l.layer); } function showLegend(map_id,lno) { var l=GIS_ol_maps[map_id].layers_def[lno],src='',legendType=0; switch (l.type) { case 'WMS': case 'WMSinput': src='https://geodata.rivm.nl/geoserver/wms?VERSION=1.1.1&REQUEST=GetLegendGraphic&LAYER='+GIS_ol_maps[map_id].layers_def[lno].layer+'&Format=image/png'; break; case 'datarivmnl': src=l.url+'?VERSION=1.1.1&REQUEST=GetLegendGraphic&LAYER='+GIS_ol_maps[map_id].layers_def[lno].layer+'&Format=image/png'; break; case 'Vectortile': legendType=1; break; } switch(legendType) { case 0: var el=jQuery('#gis_ol_l_'+map_id+'_lno_'+lno+'_i'); if (el.length==0 || el.html().substr(0,5)!='<img ') { img = new Image(); img.map_id2=map_id; img.no2=lno; img.src2=src; img.onload = function(){ var i=jQuery(this)[0],map_id=i.map_id2,lno=i.no2,src=i.src2, img='<img class="layer-legend" src="'+src+'">'; showUnderLayer(map_id,lno,img); }; img.src = src; } else { if (el.length==1) { el.slideToggle(); } } break; case 1: var ll=l.lstyle, pos=ll.indexOf('styles'), openhaak=0,tl, c, qt='', lf='', styles; if (pos!==false) { ll=ll.substr(pos); for (tl=0;tl<ll.length;tl++) { c=ll.substr(tl,1); switch (c) { case '\'': case '"': if (c==qt) {qt='';} break; case '{': if (qt=='') {openhaak++;} break; case '}': if (qt=='') {openhaak--; if (openhaak==0) {lf=ll.substr(0,tl+1);tl=ll.length;}} break; } } if (lf!='') { eval(lf+';'); var s='<div style="text-align: left; background-color: white; font-size: 0.9em; padding: 3px 30px 0 0;">',keys=Object.keys(styles),k,kt,fill,stroke; for (kt=0;kt<keys.length;kt++) { k=styles[keys[kt]]; fill=k.getFill(); stroke=k.getStroke(); s+='<div><div style="display:inline-block; width: 18px; height: 18px; margin: 3px 30px 0 0; background-color: '+fill.getColor()+'; border: solid 1px '+stroke.getColor()+';"></div><div style="margin-top: 5px; display: inline-block; vertical-align: top;">'+keys[kt]+'</div></div>'; } showUnderLayer(map_id,lno,s+'</div>'); } } break; } } function showUnderLayer(map_id,lno,html) { var el=jQuery('#gis_ol_l_'+map_id+'_lno_'+lno+'_i'); if (el.length==0) { el=jQuery('<div id="gis_ol_l_'+map_id+'_lno_'+lno+'_i" style="padding-top: 4px; display: none;">'+html+'</div>'); jQuery('#gis_ol_l_'+map_id+'_lno_'+lno).append(el); el.slideDown(); } else { if (el.html()!=html) { if (el.css('display')=='none') { el.html(html); el.slideDown(); } else { el.slideUp(400,function() { el.html(html); el.slideDown(); }); } } else { el.slideToggle(); } } } (function (root, factory) { if(typeof define === "function" && define.amd) { define(["openlayers"], factory); } else if(typeof module === "object" && module.exports) { module.exports = factory(require("openlayers")); } else { root.Legenda = factory(root.ol); } }(this, function(ol) { ol.control.Legenda = function(opt_options) { var options = opt_options || {}; var map_id = options.map_id ? options.map_id : -1; var tipLabel = options.tipLabel ? options.tipLabel : 'Toon legenda'; this.hiddenClassName = 'ol-unselectable ol-control '+(typeof(options['className'])=='undefined'?'':' '+options['className']); this.shownClassName = 'shown'; var element = document.createElement('div'); element.className = this.hiddenClassName; var button = document.createElement('button'); button.setAttribute('title', tipLabel); element.appendChild(button); this.panel = document.createElement('div'); this.panel.className = 'panel'; element.appendChild(this.panel); var this_ = this; button.onclick = function(e) { e = e || window.event; if (jQuery(jQuery(this).parent()).find('.panel').css('display')=='none') {this_.showPanel(map_id);} else {this_.hidePanel();} e.preventDefault(); }; this_.panel.onmouseout = function(e) { e = e || window.event; if (!this_.panel.contains(e.toElement || e.relatedTarget)) { this_.hidePanel(); } }; ol.control.Control.call(this, {element: element,target: options.target}); }; ol.inherits(ol.control.Legenda, ol.control.Control); ol.control.Legenda.prototype.showPanel = function(map_id) { if (!this.element.classList.contains(this.shownClassName)) { jQuery(this.panel).css('max-height',(jQuery('#gis_ol_map_'+map_id).height()-68)+'px'); this.element.classList.add(this.shownClassName); this.renderPanel(map_id); } }; ol.control.Legenda.prototype.hidePanel = function() { if (this.element.classList.contains(this.shownClassName)) { this.element.classList.remove(this.shownClassName); } }; ol.control.Legenda.prototype.renderPanel = function(map_id) { while(this.panel.firstChild) {this.panel.removeChild(this.panel.firstChild);} div = document.createElement('div'); div.innerHTML='De zichtbare lagen bevatten geen filters.'; var t, t1=0, t2;; for (t=0;t<GIS_ol_maps[map_id].layers.length;t++) if (GIS_ol_maps[map_id].layers[t].getVisible()) { t1++; t2=t; } if (t1==1) { div.innerHTML='Laag '+t2; } this.panel.appendChild(div); }; var Legenda = ol.control.Legenda; return Legenda; })); (function (root, factory) { if(typeof define === "function" && define.amd) { define(["openlayers"], factory); } else if(typeof module === "object" && module.exports) { module.exports = factory(require("openlayers")); } else { root.Filter = factory(root.ol); } }(this, function(ol) { ol.control.Filter = function(opt_options) { var options = opt_options || {}; var map_id = options.map_id ? options.map_id : -1; var tipLabel = options.tipLabel ? options.tipLabel : 'Toon filter window'; this.hiddenClassName = 'ol-unselectable ol-control '+(typeof(options['className'])=='undefined'?'':' '+options['className']); this.shownClassName = 'shown'; var element = document.createElement('div'); element.className = this.hiddenClassName; var button = document.createElement('button'); button.setAttribute('title', tipLabel); element.appendChild(button); this.panel = document.createElement('div'); this.panel.className = 'panel'; element.appendChild(this.panel); var this_ = this; button.onclick = function(e) { e = e || window.event; if (jQuery(jQuery(this).parent()).find('.panel').css('display')=='none') {this_.showPanel(map_id);} else {this_.hidePanel();} e.preventDefault(); }; this_.panel.onmouseout = function(e) { e = e || window.event; if (!this_.panel.contains(e.toElement || e.relatedTarget)) { this_.hidePanel(); } }; ol.control.Control.call(this, {element: element,target: options.target}); }; ol.inherits(ol.control.Filter, ol.control.Control); ol.control.Filter.prototype.showPanel = function(map_id) { if (!this.element.classList.contains(this.shownClassName)) { jQuery(this.panel).css('max-height',(jQuery('#gis_ol_map_'+map_id).height()-68)+'px'); this.element.classList.add(this.shownClassName); this.renderPanel(map_id); } }; ol.control.Filter.prototype.hidePanel = function() { if (this.element.classList.contains(this.shownClassName)) { this.element.classList.remove(this.shownClassName); } }; ol.control.Filter.prototype.renderPanel = function(map_id) { while(this.panel.firstChild) {this.panel.removeChild(this.panel.firstChild);} var dataVelden, div, t, t3=0, html='', checkSameField=GIS_ol_maps[map_id].fg>=1, didFields=''; for (t=0;t<GIS_ol_maps[map_id].layers_def.length;t++) { if (GIS_ol_maps[map_id].layers[t].getVisible()) { dataVelden=GIS_ol_maps[map_id].layers_def[t].dataVelden; if (dataVelden) { var t1, t2=0, html1='<tr><td colspan="2" style="font-weight: bold;">'+GIS_ol_maps[map_id].layers_def[t].title+'</td></tr>'; for (t1=0;t1<dataVelden.length;t1++) if (dataVelden[t1].filter!='') { if (checkSameField===false || didFields.indexOf(' ,\''+dataVelden[t1].label+'\'')<0) { html1+=Filters.types[dataVelden[t1].filter].getHTML(dataVelden[t1].label,map_id,t,t1,dataVelden[t1].subfilter,dataVelden[t1].waarden); didFields+=' ,\''+dataVelden[t1].label+'\''; t2++; t3++; } } if (t2>0) { html+=html1; } } } } if (t3==0) { div = document.createElement('div'); div.innerHTML='De zichtbare lagen bevatten geen filters.'; } else { div = document.createElement('table'); html+='<tr><td colspan="2" class="filter-buttons"><input type="button" class="button" value="Reset" onclick="Filters.reset('+map_id+');"><input type="button" class="button" value="Toepassen" onclick="jQuery(this).closest(\'.ol-control.filter\').removeClass(\'shown\');" style="float: right;"></td></tr>'; div.innerHTML=html; } this.panel.appendChild(div); }; var Filter = ol.control.Filter; return Filter; })); (function (root, factory) { if(typeof define === "function" && define.amd) { define(["openlayers"], factory); } else if(typeof module === "object" && module.exports) { module.exports = factory(require("openlayers")); } else { root.Legend = factory(root.ol); } }(this, function(ol) { ol.control.ScaleBar2 = function(opt_options) { var options = opt_options || {}; var map_id = options.map_id ? options.map_id : -1; var tipLabel = options.tipLabel ? options.tipLabel : 'Schaal'; var element = document.createElement('div'); element.className = 'ol-unselectable ol-control'+(typeof(options['className'])=='undefined'?'':' '+options['className']); element.setAttribute('id','ScaleBar2_'+map_id); jQuery(element).append('<table><tr><td colspan="6" id="scalebar2Title_'+map_id+'" class="scalebarTxt"></td></tr><tr><td></td><td class="lo"></td><td class="o"></td><td class="lo"></td><td class="o"></td><td class="l"></td></tr><tr><td></td><td class="l"></td><td class="l"></td><td class="l"></td><td class="l"></td><td class="l"></td></tr><tr><td colspan="2" id="scalebar2G0_'+map_id+'" class="scalebarTxt">0</td><td colspan="2" id="scalebar2G1_'+map_id+'" class="scalebarTxt"></td><td colspan="2" id="scalebar2G2_'+map_id+'" class="scalebarTxt"></td></tr></table>'); ol.control.Control.call(this, {element: element,target: options.target}); }; ol.inherits(ol.control.ScaleBar2, ol.control.Control); var ScaleBar2 = ol.control.ScaleBar2; return ScaleBar2; })); function ScaleBar2Set(map_id,old_scale) { if (GIS_ol_maps[map_id].sb>=1) { var v=GIS_ol_maps[map_id].map.getView(); var scale=v.getResolution(); var wpixels=jQuery('#gis_ol_map_'+map_id).parent().width(); var meterperpix=(scale/v.getMaxResolution()*(GIS_ol_maps[map_id].extNL[2]-GIS_ol_maps[map_id].extNL[0]))/wpixels; var b=30*meterperpix, b2, sg, g1, g2, w, u='meter'; b2=''+b; b2=b2.replace('.','')+'0000'; while(b2.substr(0,1)=='0') {b2=b2.substr(1);} b2=parseInt(b2.substr(0,2),10); if (b2<10) {sg=1;} else if (b2<20) {sg=2;} else if (b2<25) {sg=2.5;} else if (b2<50) {sg=5;} else {sg=1;} g1=sg; if (b<g1) { while (g1/10>b) {g1/=10;} } else { while (g1<b) {g1*=10;} } w=g1/meterperpix; if (g1>=1000) { u='kilometer'; g1/=1000; } g2=2*g1; document.getElementById('scalebar2Title_'+map_id).innerHTML=u; document.getElementById('scalebar2G1_'+map_id).innerHTML=g1; document.getElementById('scalebar2G2_'+map_id).innerHTML=g2; jQuery('#ScaleBar2_'+map_id).css({'width':(3*w)+'px','margin-left':(-w/2+4)+'px'}); } } (function (root, factory) { if(typeof define === "function" && define.amd) { define(["openlayers"], factory); } else if(typeof module === "object" && module.exports) { module.exports = factory(require("openlayers")); } else { root.Legend = factory(root.ol); } }(this, function(ol) { ol.control.Position2 = function(opt_options) { var options = opt_options || {}; var map_id = options.map_id ? options.map_id : -1; var tipLabel = options.tipLabel ? options.tipLabel : 'Zoom in op mijn locatie'; this.hiddenClassName = 'ol-unselectable ol-control zoom-position'+(typeof(options['className'])=='undefined'?'':' '+options['className']); this.shownClassName = 'shown'; var element = document.createElement('div'); element.className = this.hiddenClassName; var input = document.createElement('input'); input.setAttribute('onfocus','hidePanels('+map_id+');'); input.setAttribute('title', 'Zoek locatie'); input.className='gis_ol_zoekveld'; input.setAttribute('id', 'gis_ol_z_'+map_id); element.appendChild(input); var button = document.createElement('button'); button.setAttribute('title', 'Start zoeken'); button.className='gis_ol_zoekknop'; element.appendChild(button); button.onclick = function(e) { e = e || window.event; e.preventDefault(); hidePanels(map_id); jQuery.getJSON( position2_url_suggest+'&q='+jQuery('#gis_ol_z_'+map_id).val(), function( data ) { if (data.response && data.response.docs.length>=1) { var id=data.response.docs[0].id; jQuery.getJSON( position2_url_lookup+id, function( data ) { var l=data.response.docs[0].centroide_ll.split(' '); l[0]=parseFloat(l[0].substr(6)); l[1]=parseFloat(l[1].substr(0,l[1].length-1)); position2map=map_id; jQuery('#gis_ol_z_'+map_id).val(data.response.docs[0].weergavenaam); gotoPosition2({coords: {longitude:l[0],latitude:l[1]}}); }); } }); }; var button2 = document.createElement('button'); button2.setAttribute('title', tipLabel); button2.className='gis_ol_gotopos'; element.appendChild(button2); button2.onclick = function(e) { e = e || window.event; e.preventDefault(); hidePanels(map_id); var msg=''; try { if (navigator.geolocation) { position2map=map_id; navigator.geolocation.getCurrentPosition(gotoPosition2); } else { msg='Geolocation is not supported by this browser.'; } } catch (error) { msg=error; } if (msg!='') {alert(msg);} }; ol.control.Control.call(this, {element: element,target: options.target}); }; ol.inherits(ol.control.Position2, ol.control.Control); var Position2 = ol.control.Position2; return Position2; })); var position2map=0; function gotoPosition2(p) { var c=ol.proj.fromLonLat([p.coords.longitude, p.coords.latitude],'EPSG:28992'); GIS_ol_maps[position2map].map.getView().animate({zoom: GIS_ol_maps[position2map].pz,center: c}); if (GIS_ol_maps[position2map].marker) { GIS_ol_maps[position2map].marker.getSource().getFeatures()[0].getGeometry().setCoordinates(c); } } var GIS_ol_maps=[]; function getLayerWMS(map_id,url,layer,title,opacity,visible_,grp) { if (typeof(visible_)=='undefined') {visible_=false;} if (typeof(grp)=='undefined') {grp='Overlay';} return new ol.layer.Image({ title: title, extent: GIS_ol_maps[map_id].ext, source: new ol.source.ImageWMS({ url: url, params: { layers: layer, srs: 'EPSG:28992', format: 'image/png', }, }), type: grp, opacity: opacity, visible_: visible_, }); } var resolutions, matrixIds; function getLayerWMTS(map_id,url,layer,addLayerToUrl,title,opacity,visible_,grp) { if (typeof(visible_)=='undefined') {visible_=false;} if (typeof(grp)=='undefined') {grp='Overlay';} resolutions = [3440.64, 1720.32, 860.16, 430.08, 215.04, 107.52, 53.76, 26.88, 13.44, 6.72, 3.36, 1.68, 0.84, 0.42]; matrixIds = new Array(14); for (var z = 0; z < 15; ++z) { matrixIds[z] = 'EPSG:28992:' + z; } var tile={ title: title, extent: GIS_ol_maps[map_id].ext, source: new ol.source.WMTS({ url: url+(addLayerToUrl?'/'+layer:''), layer: layer, matrixSet: 'EPSG:28992', format: 'image/png', projection: GIS_ol_maps[map_id].projection, tileGrid: new ol.tilegrid.WMTS({ extent: GIS_ol_maps[map_id].ext, resolutions: resolutions, matrixIds: matrixIds }) }), type: grp, opacity: opacity, visible_: visible_}; if (grp=='base') {tile.visible=visible_;} return new ol.layer.Tile(tile); } function getLayerVector(map_id,t,url,layer,title,opacity,visible_,grp) { if (typeof(visible_)=='undefined') {visible_=false;} if (typeof(grp)=='undefined') {grp='Overlay';} url='http://localhost:8080/pbf_server'; eval('function getVectorStyle'+t+'(feature) {var styles, style, properties=feature.getProperties(); '+GIS_ol_maps[map_id].layers_def[t].lstyle+'; return style;}'); var tile=new ol.layer.VectorTile({ title: title, type: grp, opacity: opacity, visible_: visible_, style: eval('getVectorStyle'+t), source: new ol.source.VectorTile({ tilePixelRatio: 1, tileGrid: ol.tilegrid.createXYZ({maxZoom: 12}), format: new ol.format.MVT(), url: url+'/'+'geoADM_GEBIEDSINDELINGEN'+'@RD_New@pbf/{z}/{x}/{-y}.pbf', }) }); return tile } var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length){n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)+this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;var s,o,u,a;var f=0;e=e.replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length){s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));u=this._keyStr.indexOf(e.charAt(f++));a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);return t},_utf8_encode:function(e){e=e.replace(/rn/g,"n");var t="";for(var n=0;n<e.length;n++){var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048){t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else{t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e){var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else{c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}return t}}; function performMelding(map_id,layerNo,coordinate) { var els=[]; jQuery('#gis_ol_data_error'+map_id).html(''); jQuery('[id^=gis_ol_inp_v_]').each(function(t,el){el=jQuery(el);els[els.length]=[el.prop('id'),el.val()]}); var view=GIS_ol_maps[map_id].map.getView(); var viewResolution = view.getResolution(); var viewProjection = view.getProjection(); var urlParms={'kaartNo':layerNo, 'FEATURE_COUNT':100, 'INFO_FORMAT': 'application/json', 'QUERY_LAYERS':GIS_ol_maps[map_id].layers_def[layerNo].layer}; var url = GIS_ol_maps[map_id].layers[layerNo].getSource().getGetFeatureInfoUrl(coordinate.split(','), viewResolution, viewProjection, urlParms); if (url) { jQuery.ajax({ type: "GET", url: url, layer_t:layerNo, dataType: 'json' }).done(function(data){ var a=data; jQuery('#gis_ol_map_'+map_id+'_data').hide(); }).fail(function(jqXHR, textStatus, errorThrown) { var msg=''; if (jqXHR.responseText) {msg=jqXHR.responseText;} if (msg=='' && errorThrown) { if (errorThrown.message) {msg=errorThrown.message;} } if (msg=='') {msg='(possible error) Cross-Origin Read Blocking (CORB) blocked cross-origin response';} console.log('Systeemfout: '+msg); jQuery('#gis_ol_data_error'+map_id).html('Systeemfout: '+msg); }); } } function GIS_paragraaf_start(map_id) { GIS_ol_maps[map_id]={ currentLayer: 0, layers_def:[], base_layers:[], layers:[], layerData:[], extNL:[0,300000,300000,650000], ext: [-285401.92,22598.08,595401.9199999999,903401.9199999999], projection: null, controls:[], map: null, popupCenter: false}; var map=jQuery('#gis_ol_map_'+map_id), parms=map.attr('parms').split(','),t, t1, w,v; for (t=0;t<parms.length;t++) { t1=parms[t].indexOf('='); v=parms[t].substr(t1+1); w=parms[t].substr(0,t1); if (w!='b' && w!='o' && w!='fg' && w!='l' && v==parseInt(v,10)) {v=parseInt(v,10);} GIS_ol_maps[map_id][w]=v; } GIS_ol_maps[map_id].m=Base64.decode(GIS_ol_maps[map_id].m); var wpixels=jQuery('#gis_ol_map_'+map_id).parent().width(); jQuery(map.parent()).css({'height': (wpixels*GIS_ol_maps[map_id].a)+'px'}); GIS_ol_maps[map_id].projection = new ol.proj.Projection({code: 'EPSG:28992',units: 'm',extent:GIS_ol_maps[map_id].extNL}); ol.proj.addProjection(GIS_ol_maps[map_id].projection); proj4.defs("EPSG:28992","+proj=sterea +lat_0=52.15616055555555 +lon_0=5.38763888888889 +k=0.9999079 +x_0=155000 +y_0=463000 +ellps=bessel +towgs84=565.417,50.3319,465.552,-0.398957,0.343988,-1.8774,4.0725 +units=m +no_defs"); var kleuren=[ ['bruin' ,true, '#94710a', '#dfd4b5', '#efeada'], ['donkerblauw',true, '#01689b', '#cce0f1', '#e5f0f9'], ['donkergeel' ,false, '#ffb612', '#ffe9b7', '#fff4dc'], ['donkergroen',true, '#275937', '#becdc3', '#dfe6e1'], ['donkerbruin',true, '#673327', '#d1c1be', '#e8e1df'], ['geel' ,false, '#f9e11e', '#fdf6bb', '#fefbdd'], ['groen' ,true, '#39870c', '#c3dbb6', '#e1eddb'], ['hemelblauw' ,true, '#007bc7', '#b2d7ee', '#d9ebf7'], ['lichtblauw' ,false, '#8fcae7', '#ddeff8', '#eef7fb'], ['mintgroen' ,false, '#76d2b6', '#d6f1e9', '#ebf8f4'], ['mosgroen' ,true, '#777c00', '#d6d7b2', '#ebebd9'], ['oranje' ,false, '#e17000', '#f6d4b2', '#fbead9'], ['paars' ,true, '#42145f', '#c6b8cf', '#e3dce7'], ['robijnrood' ,true, '#ca005d', '#efb2ce', '#f7d9e7'], ['rood' ,true, '#d52b1e', '#f2bfbb', '#f9dfdd'], ['roze' ,false, '#f092cd', '#fadef0', '#fdeff8'], ['violet' ,true, '#a90061', '#e5b2cf', '#f2d9e7'], ['wit' ,false, '#ffffff', '#ffffff', '#ffffff'], ]; GIS_ol_maps[map_id].white=true; if (GIS_ol_maps[map_id].u!=='automatisch') { for (var t=0;t<kleuren.length;t++) if (GIS_ol_maps[map_id].u==kleuren[t][0]) { GIS_ol_maps[map_id].white=kleuren[t][1]; t=kleuren.length; } } else { var intToHex=function(i) {i=parseInt(i,10); var s=i.toString(16); if (s.length==1) {s='0'+s;} return s;},t,t1,s,s1, regex,kleur=jQuery('nav.navbar-branded').css('background-color'); if (typeof(kleur)!='undefined') { var newRule=function(s,white) { var s1=s.replace(/#275937/gi,kleurMat1); s1=s1.replace(/rgb\(39, 89, 55\)/gi,kleurRGB1); s=s1.replace(/#becdc3/gi,kleurMat2); s1=s1.replace(/rgb\(190, 205, 195\)/gi,kleurRGB2); s1=s1.replace(/#dfe6e1/gi,kleurMat3); s1=s1.replace(/rgb\(223, 230, 225\)/gi,kleurRGB3); if (!white) { s1=s1.replace(/color\: white/gi,'color: black'); s1=s1.replace(/\-white.png/gi,'.png'); } return s1; }; if (kleur.substr(0,3)=='rgb') {kleur=kleur.substr(kleur.indexOf('(')+1); kleur=kleur.substr(0,kleur.length-1).split(',');kleurMat1='#'+intToHex(kleur[0])+intToHex(kleur[1])+intToHex(kleur[2]); kleurRGB1='rgb('+kleur[0]+', '+kleur[1]+', '+kleur[2]+')';} else {kleurMat1=kleur; kleurRBG1='rgb('+parseInt(kleur.substr(1,2),16)+', '+parseInt(kleur.substr(3,2),16)+', '+parseInt(kleur.substr(5,2),16)+')';} for (t=0;t<kleuren.length;t++) { if (kleurMat1==kleuren[t][2]) { var kleurMat1, kleurRGB1, kleurMat2, kleurRGB2, kleurMat3, kleurRGB3, sheet; GIS_ol_maps[map_id].white=kleuren[t][1]; kleur=kleuren[t][2]; kleurMat1=kleur; kleurRGB1='rgb('+parseInt(kleur.substr(1,2),16)+', '+parseInt(kleur.substr(3,2),16)+', '+parseInt(kleur.substr(5,2),16)+')'; kleur=kleuren[t][3]; kleurMat2=kleur; kleurRGB2='rgb('+parseInt(kleur.substr(1,2),16)+', '+parseInt(kleur.substr(3,2),16)+', '+parseInt(kleur.substr(5,2),16)+')'; kleur=kleuren[t][4]; kleurMat3=kleur; kleurRGB3='rgb('+parseInt(kleur.substr(1,2),16)+', '+parseInt(kleur.substr(3,2),16)+', '+parseInt(kleur.substr(5,2),16)+')'; for(t=0; t<document.styleSheets.length; t++) { sheet = document.styleSheets[t]; if (typeof(sheet.href)!='undefined') { if (sheet.href.indexOf('donkergroen')>=1) { var rules=sheet.rules; for (t1=0;t1<rules.length;t1++) { s=rules[t1].cssText; s1=newRule(s,GIS_ol_maps[map_id].white); if (s!=s1) { sheet.insertRule(s1,sheet.rules.length); } } t=document.styleSheets.length; } } else { for (t1=0;t1<sheet.cssRules.length;t1++) { if (sheet.cssRules[t1].href.indexOf('donkergroen')>=1) { sheet=sheet.cssRules[t1].styleSheet; var rules=sheet.rules; for (t1=0;t1<rules.length;t1++) { s=rules[t1].cssText; s1=newRule(s,GIS_ol_maps[map_id].white); if (s!=s1) { sheet.insertRule(s1,sheet.rules.length); } } t1=sheet.cssRules.length; t=document.styleSheets.length; } } } } t=kleuren.length; } } } } var cls; if (GIS_ol_maps[map_id].z) { GIS_ol_maps[map_id].controls[GIS_ol_maps[map_id].controls.length]=new ol.control.Zoom({className:'gis_ol_zoom',tipLabel:'In- en uitzooomen'}); } if (GIS_ol_maps[map_id].e) { cls='gis_ol_zoom_extent gis_ol_zoom_extent'+(GIS_ol_maps[map_id].z?'1':'0'); GIS_ol_maps[map_id].controls[GIS_ol_maps[map_id].controls.length]=new ol.control.ZoomToExtent({extent: GIS_ol_maps[map_id].extNL, className: cls,label:'',tipLabel:'Zoom uit naar kaart extentie'}); } if (GIS_ol_maps[map_id].f) { cls='gis_ol_fullscreen gis_ol_fullscreen'+(GIS_ol_maps[map_id].z || GIS_ol_maps[map_id].e?(GIS_ol_maps[map_id].z && GIS_ol_maps[map_id].e?'2':'1'+(GIS_ol_maps[map_id].z?'b':'a')):'0'); GIS_ol_maps[map_id].controls[GIS_ol_maps[map_id].controls.length]=new ol.control.FullScreen({label:'',className: cls,tipLabel:'Toon kaart fullscreen'}); } if (GIS_ol_maps[map_id].p) { cls='gis_ol_position2 gis_ol_position2'+(GIS_ol_maps[map_id].z || GIS_ol_maps[map_id].e || GIS_ol_maps[map_id].f?'1':'0'); GIS_ol_maps[map_id].controls[GIS_ol_maps[map_id].controls.length]=new ol.control.Position2({'map_id':map_id, className: cls}); GIS_ol_maps[map_id].marker=new ol.layer.Vector({ style: [ new ol.style.Style({ image: new ol.style.Circle({ radius: 8, stroke: new ol.style.Stroke({ color: [0,0,0], width: 1 }) }) }), new ol.style.Style({ image: new ol.style.Circle({ radius: 4, stroke: new ol.style.Stroke({ color: [0,0,0], width: 1 }) }) }), ], source: new ol.source.Vector({ matrixSet: 'EPSG:28992', projection: GIS_ol_maps[map_id].projection, features: [new ol.Feature({geometry: new ol.geom.Point(ol.proj.fromLonLat([0,0],'EPSG:28992'))})] }) }); } if (GIS_ol_maps[map_id].ld) { var lds=GIS_ol_maps[map_id].ld.split('|'), ld, ldt, dataVelden, inputVelden, dobj, dobj1, dobj_t, dobj_p, dobj_v, dobj_w, dobj_all, ldt1; for (ldt=0;ldt<lds.length;ldt++) { ld=lds[ldt]; if (ld!='') { ld=Base64.decode(ld).split('|'); dobj=(typeof(ld[7])=='undefined'?'':jQuery.trim(ld[7])); dataVelden=false; inputVelden=[]; if (dobj!='') { dobj=dobj.split(','); dobj_all=true; for (dobj_t=0;dobj_t<dobj.length;dobj_t++) { dobj1=dobj[dobj_t].split('^'); dobj_p=dobj1[0].indexOf('='); dobj_v=dobj1[0].substr(0,dobj_p); dobj_w=dobj1[0].substr(dobj_p+1); if (dobj_w!='') { dobj_all=false; } if (dobj1[5]!='' && dobj1[5]!='0') { inputVelden[inputVelden.length]={'veld':dobj_v,'label':dobj_w==''?dobj_v:dobj_w,inp_win_type:dobj1[5]}; } } if (!dobj_all) { for (dobj_t=0;dobj_t<dobj.length;dobj_t++) { dobj1=dobj[dobj_t].split('^'); dobj_p=dobj1[0].indexOf('='); dobj_v=dobj1[0].substr(0,dobj_p); dobj_w=dobj1[0].substr(dobj_p+1); if (dobj_all || dobj_w!='') { if (dataVelden===false) {dataVelden=[];} dataVelden[dataVelden.length]={'veld':dobj_v,'label':dobj_w,'ralign':dobj1[2]=='1','eenheid':dobj1[1]==''?'':' '+dobj1[1],filter:dobj1[3],subfilter:dobj1[4]?dobj1[4].split('*'):['='],inp_win_type:dobj1[5]?dobj1[5]:['']}; } } } } GIS_ol_maps[map_id].layers_def[GIS_ol_maps[map_id].layers_def.length]={'type':jQuery.trim(ld[0]),'url':jQuery.trim(ld[1]),'layer':jQuery.trim(ld[2]),'title':jQuery.trim(ld[3]),'opacity':jQuery.trim(ld[4]),'visible_':(typeof(ld[5])=='undefined'?true:jQuery.trim(ld[5]).toLowerCase()=='on'),'data':(typeof(ld[6])=='undefined'?0:jQuery.trim(ld[6])),'data':(typeof(ld[6])=='undefined'?0:jQuery.trim(ld[6])),'inp_win':(typeof(ld[8])=='undefined'?0:jQuery.trim(ld[8])),'lstyle':(typeof(ld[9])=='undefined'?0:jQuery.trim(ld[9].replace(/(\[\-\])/g,''))),'dataVelden':dataVelden,'inputVelden':inputVelden}; } } if (GIS_ol_maps[map_id].fg.substr(0,1)==1) { var fg=GIS_ol_maps[map_id].fg.substr(1,1); for (ldt=0;ldt<GIS_ol_maps[map_id].layers_def.length;ldt++) { ld=GIS_ol_maps[map_id].layers_def[ldt]; if (ld.dataVelden) { for (ldt1=0;ldt1<ld.dataVelden.length;ldt1++) { var ldt2,ld2, ldt2v; for (ldt2=0;ldt2<ldt;ldt2++) { ld2=GIS_ol_maps[map_id].layers_def[ldt2]; if (ld2.dataVelden) { for (ldt12=0;ldt12<ld2.dataVelden.length;ldt12++) { ldt2v=ld2.dataVelden[ldt12]; if ((fg==1 && ld.dataVelden[ldt1].veld==ldt2v.veld) || (fg==2 && ld.dataVelden[ldt1].label==ldt2v.label)) { ld.dataVelden[ldt1].filter='fromFilter'; ld.dataVelden[ldt1].filterA=ldt2; ld.dataVelden[ldt1].filterB=ldt12; ldt12=ld2.dataVelden.length; ldt2=ldt; } } } } } } } } } var l; GIS_ol_maps[map_id].hasData=false; for (t=0;t<GIS_ol_maps[map_id].layers_def.length;t++) { l=GIS_ol_maps[map_id].layers_def[t]; switch (l.type) { case 'WMS': case 'datarivmnl': GIS_ol_maps[map_id].layers[t]=getLayerWMS(map_id,l.url,l.layer,l.title,l.opacity,l.visible_); break; case 'WMSinput': GIS_ol_maps[map_id].layers[t]=getLayerWMS(map_id,l.url,l.layer,l.title,l.opacity,l.visible_); break; case 'WMTS': GIS_ol_maps[map_id].layers[t]=getLayerWMTS(map_id,l.url,l.layer,true,l.title,l.opacity,l.visible_); break; case 'Vectortile': GIS_ol_maps[map_id].layers[t]=getLayerVector(map_id,t,l.url,l.layer,l.title,l.opacity,l.visible_); break; } if (l.data>=1) {GIS_ol_maps[map_id].hasData=true;} } var b=GIS_ol_maps[map_id]['b'],bt=0; if (b.substr(0,1)=='1') {GIS_ol_maps[map_id].base_layers[bt]=getLayerWMTS(map_id,'https://geodata.nationaalgeoregister.nl/tiles/service/wmts','brtachtergrondkaart',true,'brt achtergrondkaart',1,true,'base'); bt++;} if (b.substr(1,1)=='1') {GIS_ol_maps[map_id].base_layers[bt]=getLayerWMTS(map_id,'https://geodata.nationaalgeoregister.nl/luchtfoto/rgb/wmts','Actueel_ortho25',false,'Luchtfoto',1,false,'base'); bt++;} if (b.substr(2,1)=='1') {GIS_ol_maps[map_id].base_layers[bt]=getLayerWMTS(map_id,'https://geodata.nationaalgeoregister.nl/tiles/service/wmts','top25raster',true,'Topografisch',1,false,'base');} b=''+GIS_ol_maps[map_id]['o']; if (b.substr(0,1)=='1') {GIS_ol_maps[map_id].base_layers[bt]=getLayerWMS(map_id,'https://geodata.rivm.nl/geoserver/wms','rivm:nl_landscontour_lw','',1,true,'overlaykaart'); bt++;} var wmeter=GIS_ol_maps[map_id].extNL[2]-GIS_ol_maps[map_id].extNL[0]; var pixpermeter=wmeter/wpixels; var layer_d=[]; if (bt>=1) { layer_d=[ new ol.layer.Group({ 'title': 'Basiskaart', 'combine':false, layers: GIS_ol_maps[map_id].base_layers, }), ]; } if (GIS_ol_maps[map_id].layers_def.length>=1) { layer_d[layer_d.length]=new ol.layer.Group({ 'title': 'Kaartlagen', 'combine':false, layers: GIS_ol_maps[map_id].layers, }); } b=''+GIS_ol_maps[map_id]['o']; bt=0; o=[]; if (b.substr(1,1)=='1') {o[bt]=getLayerWMS(map_id,'https://geodata.rivm.nl/geoserver/wms','rivm:nl_provincie_2019','',1,true,'overlaykaart'); bt++;} if (b.substr(2,1)=='1') {o[bt]=getLayerWMS(map_id,'https://geodata.rivm.nl/geoserver/wms','rivm:adm_nl_gemeente_2019','',1,true,'overlaykaart'); bt++;} if (bt>=1) { layer_d[layer_d.length]=new ol.layer.Group({ 'title': 'Overlaykaart', 'combine':false, layers: o, }); } if (GIS_ol_maps[map_id].marker) {layer_d[layer_d.length]=GIS_ol_maps[map_id].marker;} GIS_ol_maps[map_id].map = new ol.Map({ layers: layer_d, numZoomLevels: 12, target: 'gis_ol_map_'+map_id, units: 'm', view: new ol.View({ projection: GIS_ol_maps[map_id].projection, center: ol.extent.getCenter(GIS_ol_maps[map_id].extNL), resolution: pixpermeter, maxResolution: pixpermeter, enableRotation: false, extent: GIS_ol_maps[map_id].extNL, }), controls: GIS_ol_maps[map_id].controls, }); GIS_ol_maps[map_id].map.map_id=map_id; if (GIS_ol_maps[map_id].l1==1) { var legenda=''; if (GIS_ol_maps[map_id].c==1) { if (GIS_ol_maps[map_id].sb>=1) { legenda=' legenda2'; } else { legenda=' legenda1a'; } } else { if (GIS_ol_maps[map_id].sb>=1) { legenda=' legenda1b'; } } legenda = new ol.control.Legenda({'map_id':map_id,className:'legenda'+legenda}); GIS_ol_maps[map_id].map.addControl(legenda); } if (GIS_ol_maps[map_id].c==1) { var mousePositionControl = new ol.control.MousePosition({ coordinateFormat: ol.coordinate.createStringXY(0), projection: GIS_ol_maps[map_id].projection, className: 'ol-control custom-mouse-position', undefinedHTML: '&nbsp;' }); GIS_ol_maps[map_id].map.addControl(mousePositionControl); } if (GIS_ol_maps[map_id].sb>=1) { var scaleline = new ol.control.ScaleBar2({'map_id':map_id, className:'scalebar2 scalebar2'+(GIS_ol_maps[map_id].c?'1':'0')}); GIS_ol_maps[map_id].map.addControl(scaleline); } laagControlText(map_id,0); if (GIS_ol_maps[map_id].l.substr(0,1)=='1') { var layerSwitcherControl = new ol.control.LayerSwitcher({ tipLabel: 'Toon kaartlagen window', map_id:map_id, className: 'layer-switcher', }); GIS_ol_maps[map_id].map.addControl(layerSwitcherControl); } if (GIS_ol_maps[map_id].fg.substr(0,1)=='1') { var filter = new ol.control.Filter({'map_id':map_id,className:'filter filter'+GIS_ol_maps[map_id].l.substr(0,1)}); GIS_ol_maps[map_id].map.addControl(filter); } if (GIS_ol_maps[map_id].ts) { window.app = {}; var app = window.app; app.timeSlider = function(opt_options) { var options = opt_options || {}; var handleTimeSlider = function() {hidePanels(map_id);togglePlay(map_id);}; var button=''; if (GIS_ol_maps[map_id].ts==2) { button=document.createElement('button'); button.setAttribute('id','playpauze'+map_id); button.setAttribute('class','playpauze play'); button.setAttribute('title','Play timeslider'); button.innerHTML = '&nbsp;'; button.addEventListener('click', handleTimeSlider, false); button.addEventListener('touchstart', handleTimeSlider, false); } var range = document.createElement('input'); range.setAttribute("id", "timeslider"+map_id); range.setAttribute("type", "range"); range.setAttribute("min", "0"); range.setAttribute("max", GIS_ol_maps[map_id].layers.length-1); range.setAttribute("value", "0"); range.setAttribute("type", "range"); range.setAttribute("title", "Timeslider"); if (GIS_ol_maps[map_id].ts==2) {range.setAttribute('class','play-left');} range.setAttribute('onchange','if (!jQuery(\'#playpauze'+map_id+'\').hasClass(\'play\')) {togglePlay('+map_id+');} gotoLayer('+map_id+',parseInt(this.value,10));'); range.setAttribute('oninput','gotoLayer('+map_id+',parseInt(this.value,10));'); range.setAttribute('onfocus','hidePanels('+map_id+');'); var element = document.createElement('div'); var element2 = document.createElement('div'); element.className = 'ol-unselectable ol-control timeSlider'; element2.className = 'panel timeSliderLayer'; element2.id = 'timeSliderLayer'+map_id; element.appendChild(element2); if (button!='') {element.appendChild(button);} element.appendChild(range); ol.control.Control.call(this, { element: element, target: options.target }); }; ol.inherits(app.timeSlider, ol.control.Control); GIS_ol_maps[map_id].map.addControl(new app.timeSlider); } var container = document.getElementById('popup'+map_id); var content = document.getElementById('popup-content'+map_id); var closer = document.getElementById('popup-closer'+map_id); GIS_ol_maps[map_id].overlay = new ol.Overlay( ({element: container,autoPan: true,autoPanAnimation: {duration: 250} })); closer.onclick = function() { if (jQuery(jQuery('#popup'+map_id).parent()).css('display')!='none') { if (GIS_ol_maps[map_id].popupCenter) { GIS_ol_maps[map_id].map.getView().animate({center: GIS_ol_maps[map_id].popupCenter, duration: 250}); } GIS_ol_maps[map_id].popupCenter=false; GIS_ol_maps[map_id].overlay.setPosition(undefined); closer.blur(); } return false; }; GIS_ol_maps[map_id].map.addOverlay(GIS_ol_maps[map_id].overlay); var setPopup=function(map_id,evt) { var txt, t, t1, t2, first, txt, vertaalVelden, parts, cols=0, txtLayer='', layerData, nodata=false; if (GIS_ol_maps[map_id].layerDataToDo>0) { return; } jQuery('#gis_ol_map_'+map_id).css('cursor','default'); jQuery('#wait'+map_id).hide(); var t_feature_no,t_properties=[], t_layer, t_property, t_feature_no_cls; for (t=0,first=true;t<GIS_ol_maps[map_id].layers_def.length;t++) if (GIS_ol_maps[map_id].layerData[t]) { vertaalVelden=GIS_ol_maps[map_id].layers_def[t]['dataVelden']; layerData=GIS_ol_maps[map_id].layerData[t]; t_feature_no=0; for (var tt1=0;tt1<layerData.length;tt1++) { for (var key in layerData[tt1].properties) { if (vertaalVelden) { for (t1=0;t1<vertaalVelden.length;t1++) if (key==vertaalVelden[t1].veld) { t_properties[t_properties.length]=[t,t_feature_no,vertaalVelden[t1].label,layerData[tt1].properties[key],vertaalVelden[t1].eenheid!=''?' '+vertaalVelden[t1].eenheid:'',vertaalVelden[t1].ralign]; t1=vertaalVelden.length; } } else { t_properties[t_properties.length]=[t,t_feature_no,key,layerData[tt1].properties[key],'',false]; } } t_feature_no++; } } if (t_properties.length>=1) { txt='<table class="ol-popup-table">'; var tabelVorm=GIS_ol_maps[map_id].w2; switch (tabelVorm) { case 1: txt+='<tr>'; for (t=0,t_layer=-1;t<t_properties.length;t++) { t_property=t_properties[t]; if (t_layer!=t_property[0]) { txt+=(t==0?'':'</table></td>')+'<td><table>'; if (GIS_ol_maps[map_id].tl==1) {txt+='<tr><td colspan="2" class="gis_ol_layer_header">'+GIS_ol_maps[map_id].layers_def[t_property[0]].title+'</td></tr>';} t_feature_no=-1; t_layer=t_property[0]; } if (t_feature_no!=t_property[1]) {t_feature_no=t_property[1];t_feature_no_cls=(t_feature_no==0?'':' class="gis_ol_feature_header2"');} else {t_feature_no_cls='';} txt+='<tr'+t_feature_no_cls+'><td>'+t_property[2]+'</td><td'+(t_property[5]?' style="text-align: right;"':'')+'>'+t_property[3]+t_property[4]+'</td></tr>'; } txt+='</table></td></tr>'; break; case 2: for (t=0,t_layer=-1;t<t_properties.length;t++) { t_property=t_properties[t]; if (t_layer!=t_property[0]) { if (t>0) {txt+='</table></div></td></tr>';} if (GIS_ol_maps[map_id].tl==1) {txt+='<tr'+(t==0?'':' class="gis_ol_layer_header2"')+'><td class="gis_ol_layer_header">'+GIS_ol_maps[map_id].layers_def[t_property[0]].title+'</td></tr>';} txt+='<tr><td style="white-space: nowrap;">'; t_feature_no=-1; t_layer=t_property[0]; } if (t_feature_no!=t_property[1]) {t_feature_no=t_property[1]; txt+=(t_feature_no==0?'':'</table></div>')+'<div class="gis_ol_table_lvfh"><table>';} txt+='<tr><td>'+t_property[2]+'</td><td'+(t_property[5]?' style="text-align: right;"':'')+'>'+t_property[3]+t_property[4]+'</td></tr>'; } txt+='</table></div></td></tr>'; break; case 3: case 4: var tbl=[], t1=1, t2,f; tbl[0]=['niks',]; for (t=0;t<GIS_ol_maps[map_id].layers_def.length;t++) if (GIS_ol_maps[map_id].layerData[t]) { tbl[0][t1]=t; t1++; } for (t=0;t<t_properties.length;t++) { t_property=t_properties[t]; for (t2=1;t2<t1;t2++) if (t_property[0]==tbl[0][t2]) {t_layer=t2; t2=t1;} for (t2=1,f=false;t2<tbl.length;t2++) if (tbl[t2][0]==t_property[2]) { if (tbl[t2][t_layer]){ tbl[t2][t_layer][0]+='<br>'+t_property[3]; } else { tbl[t2][t_layer]=[t_property[3],t_property[4],t_property[5]]; } f=true; } if (!f) { t3=tbl.length; tbl[t3]=[t_property[2]]; for (t2=1;t2<t1;t2++) {tbl[t3][t2]=false;} tbl[t3][t_layer]=[t_property[3],t_property[4],t_property[5]]; } } if (tabelVorm==3) { txt+='<tr><td></td>'; for (t2=1;t2<t1;t2++) { txt+='<td class="gis_ol_popup_h">'+GIS_ol_maps[map_id].layers_def[tbl[0][t2]].title+'</td>'; } txt+='</tr>'; for (t=1;t<tbl.length;t++) { f=tbl[t]; txt+='<tr><td class="gis_ol_popup_h">'+f[0]+'</td>'; for (t2=1;t2<t1;t2++) { if (f[t2]) { txt+='<td'+(f[t2][2]?' style="text-align: right;"':'')+'>'+f[t2][0]+f[t2][1]+'</td>'; } else { txt+='<td></td>'; } } txt+='</tr>'; } } else { txt+='<tr><td></td>'; for (t=1;t<tbl.length;t++) { f=tbl[t]; txt+='<td class="gis_ol_popup_h">'+f[0]+'</td>'; } txt+='</tr>'; for (t2=1;t2<t1;t2++) { txt+='<tr><td class="gis_ol_popup_h">'+GIS_ol_maps[map_id].layers_def[tbl[0][t2]].title+'</td>'; for (t=1;t<tbl.length;t++) { f=tbl[t]; if (f[t2]) { txt+='<td'+(f[t2][2]?' style="text-align: right;"':'')+'>'+f[t2][0]+f[t2][1]+'</td>'; } else { txt+='<td></td>'; } } txt+='</tr>'; } } break; default: for (t=0,t_layer=-1;t<t_properties.length;t++) { t_property=t_properties[t]; if (t_layer!=t_property[0]) { if (GIS_ol_maps[map_id].tl==1) {txt+='<tr'+(t==0?'':' class="gis_ol_layer_header2"')+'><td colspan="2" class="gis_ol_layer_header">'+GIS_ol_maps[map_id].layers_def[t_property[0]].title+'</td></tr>';} t_feature_no=-1; t_layer=t_property[0]; } if (t_feature_no!=t_property[1]) {t_feature_no=t_property[1];t_feature_no_cls=(t_feature_no==0?'':' class="gis_ol_feature_header2"');} else {t_feature_no_cls='';} txt+='<tr'+t_feature_no_cls+'><td>'+t_property[2]+'</td><td'+(t_property[5]?' style="text-align: right;"':'')+'>'+t_property[3]+t_property[4]+'</td></tr>'; } break; } txt+='</table>'; } else { nodata=true; for (t=0,t1=0;t<GIS_ol_maps[map_id].layers_def.length;t++) if (GIS_ol_maps[map_id].layers[t].getVisible() && GIS_ol_maps[map_id].layers_def[t].type=='WMSinput') { t2=t; t1++; } if (t1==1) { nodata=false; if (GIS_ol_maps[map_id].layers_def[t2].inputVelden.length>=1) { var inp_win=GIS_ol_maps[map_id].layers_def[t2].inp_win.split('^'), i=GIS_ol_maps[map_id].layers_def[t2].inputVelden; while (inp_win.lenght<10) {inp_win[inp_win.length]='';} txt=(inp_win[0]!=''?'<div class="gis_ol_data_pre">'+inp_win[0]+'</div>':'')+'<table class="ol-popup-table">'; for (t=0;t<i.length;t++) { txt+='<tr><td>'+i[t].label+'</td><td>'; switch (i[t].inp_win_type) { case '1': txt+='<input id="gis_ol_inp_v_'+t+'">'; break; case '10': txt+='<textarea id="gis_ol_inp_v_'+t+'"></textarea>'; break; } txt+='</td></tr>'; } txt+='</table>'+(inp_win[1]!=''?'<div class="gis_ol_data_post">'+inp_win[1]+'</div>':'')+'<div id="gis_ol_data_error'+map_id+'" class="gis_ol_data_error"></div><div style="text-align: right;"><input onclick="performMelding('+map_id+','+t2+',\''+evt.coordinate[0]+','+evt.coordinate[1]+'\');" type="button" value="'+inp_win[2]+'" class="button"><input onclick="jQuery(\'#gis_ol_map_'+map_id+'_data\').hide();" type="button" value="'+inp_win[3]+'" class="button" style="margin-left: 40px;"></div>'; } else { txt='Redactionele fout: Er zijn nog geen input-velden gedefini&euml;erd.'; } } } if (nodata) { if (GIS_ol_maps[map_id].m=='') {return;} txt=GIS_ol_maps[map_id].m; } var popupType=GIS_ol_maps[map_id].w1; if (jQuery('#gis_ol_map_'+map_id).find('.ol-control.ol-full-screen').find('button').hasClass('ol-full-screen-true')) {popupType=0;} switch (popupType) { case 1: var el=jQuery('#main'); if (el.length==0) {el=jQuery('.container'); if (el.length>=1) {el=jQuery(el[0]);}} var x=jQuery('#gis_ol_map_'+map_id).offset().left+evt.pixel[0],w_screen=el.width(), x_screen=el.offset().left; var p=jQuery('#gis_ol_map_'+map_id+'_data'); if (p.length==0) { jQuery('#gis_ol_map_'+map_id).prepend('<div id="gis_ol_map_'+map_id+'_data" style="position: absolute;"></div>'); p=jQuery('#gis_ol_map_'+map_id+'_data'); } p.html('<div class="ol-popup-2" id="gis_ol_map_'+map_id+'_data_inner" style="margin: 0; max-width: '+(w_screen-16)+'px;"><a class="ol-popup-closer" onclick="jQuery(\'#gis_ol_map_'+map_id+'_data\').hide();"></a><div style="overflow-y: auto;">'+txt+'</div></div>'); p.show(); var w_popup=jQuery('#gis_ol_map_'+map_id+'_data_inner').width()+20, dx=48; if (x-dx+w_popup>=x_screen+w_screen) { dx=x+w_popup-x_screen-w_screen+1; } if (dx>w_popup-48) { dx=w_popup-48; } jQuery('#gis_ol_map_'+map_id+'_data_inner').css({ top: (evt.pixel[1]+10)+'px', left: (evt.pixel[0]-dx-1)+'px', }); var s=document.getElementById('__style_map_'+map_id+'__'); if (s) { s.innerHTML='.ol-popup-2:before, .ol-popup-2:after {left: '+dx+'px !important;}'; } else { s=document.createElement('style'); s.setAttribute('id','__style_map_'+map_id+'__'); s.innerHTML='.ol-popup-2:before, .ol-popup-2:after {left: '+dx+'px !important;}'; document.body.appendChild(s); } p=jQuery('#gis_ol_map_'+map_id+'_data_inner'); p = p.offset().top+p.outerHeight(); x=jQuery(window); x=x.scrollTop() + x.height(); if (p > x) {document.getElementById('gis_ol_map_'+map_id+'_data_inner').scrollIntoView(false);} break; default: jQuery('#popup'+map_id).css({'max-height':(jQuery('#gis_ol_map_'+map_id).height()-100)+'px'}); jQuery('#popup-content'+map_id).html('<div>'+txt+'</div>'); if (GIS_ol_maps[map_id].popupCenter===false) { GIS_ol_maps[map_id].popupCenter=GIS_ol_maps[map_id].map.getView().getCenter(); } GIS_ol_maps[map_id].overlay.setPosition(evt.coordinate); break; } }; GIS_ol_maps[map_id].map.once('postrender', function() { ScaleBar2Set(map_id,GIS_ol_maps[map_id].map.getView().getResolution()); GIS_ol_maps[map_id].map.getView().on('change:resolution',function (e){ ScaleBar2Set(map_id,e.oldValue); }); for (var t=0;t<GIS_ol_maps[map_id].layers.length;t++) { GIS_ol_maps[map_id].layers[t].setVisible(GIS_ol_maps[map_id].layers_def[t].visible_); } if (GIS_ol_maps[map_id].f) { jQuery('#gis_ol_map_'+map_id).find('.gis_ol_fullscreen').each(function(t,el) { var map=jQuery('#gis_ol_map_'+map_id); GIS_ol_maps[map_id].fullscreenPrevSize=[map.width(),map.height()]; jQuery(el).on('click',function(e) { setTimeout('fullscreenChange('+map_id+');',50); }); }); } GIS_ol_maps[map_id].map.on('movestart', function(evt) { jQuery('#gis_ol_map_'+map_id+'_data').hide(); }); if (GIS_ol_maps[map_id].hasData) { GIS_ol_maps[map_id].map.on('singleclick', function(evt) { if (GIS_ol_maps[map_id].layerDataToDo>=1) {return;} jQuery('#gis_ol_map_'+map_id+'_data').hide(); map_id=evt.map.map_id; var t, d, s2, pos3; GIS_ol_maps[map_id].layerDataToDo=0; for (t=0;t<GIS_ol_maps[map_id].layers_def.length;t++) { d=GIS_ol_maps[map_id].layers_def[t].data; if (d==2 || (d==1 && GIS_ol_maps[map_id].layers[t].getVisible())) { GIS_ol_maps[map_id].layerData[t]=true; GIS_ol_maps[map_id].layerDataToDo++; } else { GIS_ol_maps[map_id].layerData[t]=false; } } for (var t=0;t<GIS_ol_maps[map_id].layers_def.length;t++) { d=GIS_ol_maps[map_id].layers_def[t].data; if (d==2 || (d==1 && GIS_ol_maps[map_id].layers[t].getVisible())) { switch(GIS_ol_maps[map_id].layers_def[t].type) { case 'WMS': case 'WMSinput': case 'datarivmnl': var view=evt.map.getView(); var viewResolution = view.getResolution(); var viewProjection = view.getProjection(); var url = GIS_ol_maps[map_id].layers[t].getSource().getGetFeatureInfoUrl(evt.coordinate, viewResolution, viewProjection, {'kaartNo':t, 'FEATURE_COUNT':100, 'INFO_FORMAT': 'application/json', 'QUERY_LAYERS':GIS_ol_maps[map_id].layers_def[t].layer}); if (url) { jQuery.ajax({ type: "GET", url: url, layer_t:t, dataType: 'json' }).done(function(data){ if (data.features.length>=1) { GIS_ol_maps[map_id].layerData[this.layer_t]=data.features; } GIS_ol_maps[map_id].layerDataToDo--; setPopup(map_id,evt); }).fail(function(jqXHR, textStatus, errorThrown) { var msg=''; if (jqXHR.responseText) {msg=jqXHR.responseText;} if (msg=='' && errorThrown) { if (errorThrown.message) {msg=errorThrown.message;} } if (msg=='') {msg='(possible error) Cross-Origin Read Blocking (CORB) blocked cross-origin response';} console.log('Systeemfout: '+msg); GIS_ol_maps[map_id].layerDataToDo--; setPopup(map_id,evt); }); } break; case 'Vectortile': var preserve_t=t; setTimeout(function() { var data={features:[]}; GIS_ol_maps[map_id].map.forEachFeatureAtPixel(evt.pixel, function(feature,layer) {if (layer.get('title')==GIS_ol_maps[map_id].layers_def[preserve_t].title) {data.features[data.features.length]={properties:feature.getProperties()};}}, {hitTolerance: 1}); if (data.features.length>=1) { GIS_ol_maps[map_id].layerData[preserve_t]=data.features; } GIS_ol_maps[map_id].layerDataToDo--; setPopup(map_id,evt); },50); break; } } } jQuery('#gis_ol_map_'+map_id).css('cursor','none'); var wait=jQuery('#wait'+map_id); if (wait.length==0) {jQuery(jQuery('#gis_ol_map_'+map_id).find('.ol-overlaycontainer-stopevent')[0]).append('<div id="wait'+map_id+'" class="wait-cursor"></div>'); wait=jQuery('#wait'+map_id);} wait.css({'position':'absolute','top': (evt.pixel[1]-16)+'px','left': (evt.pixel[0]-16)+'px'}).show(); }); } jQuery('.gis_ol_zoekveld').each(function (t,el) { el=jQuery(el); el.autocomplete({ containerClass: 'autocomplete-suggestions panel', appendTo: jQuery(jQuery('#gis_ol_base_'+map_id).find('.gis_ol_position2')[0]), width: 'initial', paramName: 'q', serviceUrl: position2_url_suggest, transformResult: function(response, originalQuery) { var o=JSON.parse(response), t, t1=o.response.docs.length; var a={'suggestions': []}; for (t=0;t<t1;t++) { e=o.response.docs[t]; a.suggestions[a.suggestions.length]={value:e.weergavenaam, data:e.id}; } return a; }, onSelect: function (suggestion) { jQuery.getJSON( position2_url_lookup+suggestion.data, function( data ) { var l=data.response.docs[0].centroide_ll.split(' '); l[0]=parseFloat(l[0].substr(6)); l[1]=parseFloat(l[1].substr(0,l[1].length-1)); position2map=map_id; gotoPosition2({coords: {longitude:l[0],latitude:l[1]}}); }); }, }).on('keyup',function (e) { if (e.keyCode==13) { var el=jQuery(jQuery(jQuery(this).parent()).find('.gis_ia_zoekknop')).click(); } }); }); jQuery('#gis_ol_map_'+map_id).find('button').mouseover(function(evt){ jQuery('#gis_ol_map_'+map_id).find('.panel').each(function(t,el) { jQuery(jQuery(el).parent()).removeClass('shown'); }); closer.onclick(); jQuery('#gis_ol_map_'+map_id+'_data').hide(); }); }); } function fullscreenChange(map_id) { var map=jQuery('#gis_ol_map_'+map_id), to=[map.width(),map.height()]; if (GIS_ol_maps[map_id].fullscreenPrevSize[0]!=to[0] || GIS_ol_maps[map_id].fullscreenPrevSize[1]!=to[1]) { var fact, aspectratioFrom=GIS_ol_maps[map_id].fullscreenPrevSize[0]/GIS_ol_maps[map_id].fullscreenPrevSize[1], aspecRatioTo=to[0]/to[1]; if (GIS_ol_maps[map_id].fullscreenPrevSize[0]<to[0]) { if (aspecRatioTo>aspectratioFrom) { fact=GIS_ol_maps[map_id].fullscreenPrevSize[1]/to[1]; } else { fact=GIS_ol_maps[map_id].fullscreenPrevSize[0]/to[0]; } } else { if (aspecRatioTo>aspectratioFrom) { fact=GIS_ol_maps[map_id].fullscreenPrevSize[0]/to[0]; } else { fact=GIS_ol_maps[map_id].fullscreenPrevSize[1]/to[1]; } } var v=GIS_ol_maps[map_id].map.getView(); v.setResolution(fact*v.getResolution()); GIS_ol_maps[map_id].fullscreenPrevSize=to; jQuery('#gis_ol_map_'+map_id+'_data').hide(); } } function hidePanels(map_id) { var el=jQuery('#gis_ol_map_'+map_id).find('.layer-switcher'); if (el.length>=1) {if (el.hasClass('shown')) {el.removeClass('shown');}} el=jQuery('#gis_ol_map_'+map_id).find('.filter'); if (el.length>=1) {if (el.hasClass('shown')) {el.removeClass('shown');}} } function laagControlText(map_id,lno) { var el=jQuery('#timeSliderLayer'+map_id); if (el.length==1) { if (playCT>0) {clearTimeout(playCT);} var t=GIS_ol_maps[map_id].layers_def[lno].title; el.html(t).show(); playCT=setTimeout('jQuery(\'#timeSliderLayer'+map_id+'\').hide().html(\'\');',GIS_ol_maps[map_id].i); } } function gotoLayer(map_id,newLayer) { if (newLayer!=GIS_ol_maps[map_id].currentLayer) { if (GIS_ol_maps[map_id].currentLayer>=0) {GIS_ol_maps[map_id].layers[GIS_ol_maps[map_id].currentLayer].setVisible(false);} GIS_ol_maps[map_id].currentLayer=newLayer; if (GIS_ol_maps[map_id].currentLayer>=0) {GIS_ol_maps[map_id].layers[GIS_ol_maps[map_id].currentLayer].setVisible(true);} laagControlText(map_id,newLayer); } } var playAt=-1, playN=0, playCT=0; function togglePlay(map_id) { el=jQuery('#playpauze'+map_id); if (el.hasClass('play')) { for (var t=1;t<GIS_ol_maps[map_id].layers.length;t++) { if (GIS_ol_maps[map_id].layers[t].getVisible()) {GIS_ol_maps[map_id].layers[t].setVisible(false);} } if (!GIS_ol_maps[map_id].layers[0].getVisible()) {GIS_ol_maps[map_id].layers[0].setVisible(true);} el.removeClass('play').addClass('pauze'); playAt=0; jQuery('#timeslider'+map_id).val(1); jQuery('#timeslider'+map_id).val(0); gotoLayer(map_id,0); laagControlText(map_id,0); playing(map_id); } else { if (GIS_ol_maps[map_id].currentLayer>0) { el.removeClass('pauze').addClass('play'); if (playN>0) {clearTimeout(playN);} } } } function playing(map_id) { playN=setTimeout(function(){ if (playAt<GIS_ol_maps[map_id].layers.length-1) { playAt++; jQuery('#timeslider'+map_id).val(playAt); gotoLayer(map_id,playAt); playing(map_id); } else { el=jQuery('#playpauze'+map_id); el.removeClass('pauze').addClass('play'); } },GIS_ol_maps[map_id].i); } window.downloadFile = function (sUrl) { if (/(iP)/g.test(navigator.userAgent)) { window.open(sUrl, '_blank'); return false; } if (window.downloadFile.isChrome || window.downloadFile.isSafari) { var link = document.createElement('a'); link.href = sUrl; link.setAttribute('target','_blank'); if (link.download !== undefined) { var fileName = sUrl.substring(sUrl.lastIndexOf('/') + 1, sUrl.length); link.download = fileName; } if (document.createEvent) { var e = document.createEvent('MouseEvents'); e.initEvent('click', true, true); link.dispatchEvent(e); return true; } } if (sUrl.indexOf('?') === -1) { sUrl += '?download'; } window.open(sUrl, '_blank'); return true; }; window.downloadFile.isChrome = navigator.userAgent.toLowerCase().indexOf('chrome') > -1; window.downloadFile.isSafari = navigator.userAgent.toLowerCase().indexOf('safari') > -1; function startDownload(el,map_id,lno,askBB) { if (askBB) { showUnderLayer(map_id,lno,'<div style="margin-left: 20px; text-align: left; min-width: 200px; max-width: 300px;">Download de data van Nederland (Nederland), of die van het ingezoomde deel (Bounding Box)<br><br><input type="button" class="button" value="Bounding Box" style="float: right; margin-right: 0;" onclick="startDownload_('+map_id+','+lno+',true)"><input type="button" class="button" value="Nederland" style="margin-left: 0;" onclick="startDownload_('+map_id+','+lno+',false)"></div>'); } else { startDownload_(map_id,lno); } } function startDownload_(map_id,lno,bb) { GIS_ol_maps[map_id].overlay.setPosition(undefined); if (GIS_ol_maps[map_id].popupCenter) { GIS_ol_maps[map_id].map.getView().animate({center: GIS_ol_maps[map_id].popupCenter, duration: 250}); } if (lno>=0 && lno <GIS_ol_maps[map_id].layers_def.length) { var layer=GIS_ol_maps[map_id].layers_def[lno], url=layer.url; layer=layer.layer; url=url.substr(0,url.length-3)+'/wfs'; url+='?service=WFS&version=2.0.0&request=GetFeature&typeNames='+layer+'&srsName=EPSG:28992&outputFormat=CSV'; if (bb) { var bbox=GIS_ol_maps[map_id].map.getView().calculateExtent(); url+='&bbox='+bbox.join(','); } downloadFile(url); } } if (typeof(Drupal)!='undefined') { (function ($, Drupal, drupalSettings) { Drupal.behaviors.gis_ol_Behavior = { attach: function (context, settings) { if (context==document) { $('.map').each(function(t,el) { el=$(el); var no=el.prop('id').substr(11); GIS_paragraaf_start(parseInt(no,10)); }); } } }; })(jQuery, Drupal, drupalSettings); }